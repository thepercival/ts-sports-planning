/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/planning": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate a planning based on configuration */
        post: operations["generatePlanning"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PlanningConfiguration: {
            categories: components["schemas"]["PlanningCategory"][];
            sports: components["schemas"]["PlanningSport"][];
            referees: components["schemas"]["PlanningReferee"][];
            gameOrder: components["schemas"]["GameOrderEnum"];
            nrOfGamesInARow: number;
        };
        Planning: {
            planningConfiguration: components["schemas"]["PlanningConfiguration"];
            games: (components["schemas"]["AgainstGame"] | components["schemas"]["TogetherGame"])[];
        };
        PlanningCategory: {
            categoryNr: number;
            poules: components["schemas"]["PlanningPoule"][];
        };
        PlanningSport: {
            seatConfigEnum: components["schemas"]["SeatConfigEnum"];
            nrOfCycles: number;
            nrOfRefereesPerGame: number;
            fields: components["schemas"]["Field"][];
            selfRefereeInfo?: {
                selfReferee: components["schemas"]["SelfRefereeEnum"];
                nrOfSeatsPerGame: number;
            } | null;
        };
        AgainstSeat: components["schemas"]["HomeAwayEnum"] | components["schemas"]["NorthSouthEastWestEnum"];
        TogetherSeat: {
            seatNr: number;
            batchNr: number;
        };
        Field: {
            fieldNr: number;
            /** @description All poules will be used when:
             *     - If no pouleFilters
             *     - If no pouleNrs available
             *     When pouleFilters are active all poules should be covered
             *      */
            pouleFilters: {
                categoryNr?: number;
                pouleNrs?: number[];
            }[];
        };
        AgainstGame: {
            seats: components["schemas"]["AgainstSeat"][];
            batchNr: number;
        } & components["schemas"]["GameProperties"];
        TogetherGame: {
            seats?: components["schemas"]["TogetherSeat"][];
        } & components["schemas"]["GameProperties"];
        GameProperties: {
            categoryNr: number;
            pouleNr: number;
            sportNr: number;
            fieldNr: number;
        };
        PlanningReferee: {
            refereeNr: number;
            /** @description All poules will be used when:
             *     - If no pouleFilters
             *     - If no pouleNrs available
             *     When pouleFilters are active all poules should be covered
             *      */
            filters: {
                sportNr?: number;
                categoryNr?: number;
            }[];
        };
        PlanningPoule: {
            pouleNr: number;
            /**
             * @description The maximum difference between the greatest and smallest poule is always 1
             *
             * @example [6,5]
             *
             */
            places: number[];
        };
        /** @enum {string} */
        HomeAwayEnum: HomeAwayEnum;
        /** @enum {string} */
        NorthSouthEastWestEnum: NorthSouthEastWestEnum;
        /** @enum {string} */
        SelfRefereeEnum: SelfRefereeEnum;
        /** @enum {string} */
        GameOrderEnum: GameOrderEnum;
        /** @enum {string} */
        SeatConfigEnum: SeatConfigEnum;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    generatePlanning: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlanningConfiguration"];
            };
        };
        responses: {
            /** @description Planning result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Planning"];
                };
            };
            /** @description Bad Request - Invalid input or malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Error message describing the bad request */
                        message?: string;
                    };
                };
            };
        };
    };
}
export enum HomeAwayEnum {
    HomeSeat = "HomeSeat",
    AwaySeat = "AwaySeat"
}
export enum NorthSouthEastWestEnum {
    NorthSeat = "NorthSeat",
    SouthSeat = "SouthSeat",
    WestSeat = "WestSeat",
    EastSeat = "EastSeat"
}

export enum GameOrderEnum {
    CycleFirst = "CycleFirst",
    PouleFirst = "PouleFirst"
}

