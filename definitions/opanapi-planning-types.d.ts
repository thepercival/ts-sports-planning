/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/planning": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate a planning based on request parameters */
        post: operations["generatePlanning"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        PlanningConfiguration: {
            categories: components["schemas"]["PlanningCategory"][];
            sports: components["schemas"]["PlanningSport"][];
            referees: components["schemas"]["PlanningReferee"][];
            gameOrder: components["schemas"]["GameOrderEnum"];
            maxNrOfGamesInARow: {
                forPlace: number | null;
                includeSelfRefereePlaces: boolean | null;
                forReferee: number | null;
            };
        };
        Planning: {
            planningConfiguration: components["schemas"]["PlanningConfiguration"];
            games: (components["schemas"]["PlanningAgainstGame"] | components["schemas"]["PlanningTogetherGame"])[];
        };
        PlanningCategory: {
            categoryNr: number;
            poules: components["schemas"]["PlanningPoule"][];
        };
        PlanningSport: {
            sportNr?: number;
            seatConfigEnum: components["schemas"]["SeatConfigEnum"];
            nrOfCycles: number;
            nrOfCycleParts: number;
            nrOfRefereesPerGame: number;
            fields: components["schemas"]["PlanningField"][];
            selfRefereeFilters?: components["schemas"]["SelfRefereeFilter"][] | null;
        };
        SelfRefereeFilter: {
            nrOfRefereesPerPlace: number;
            scope: components["schemas"]["SelfRefereeScopeEnum"];
            /** @description only used when scope is OtherPoules(SameCategory or OtherCategories) */
            categoryNrs?: number[] | null;
            /** @description only used when scope is SamePoule */
            pouleNrs?: number[] | null;
        };
        TogetherSeat: {
            seatNr: number;
            batchNr: number;
        };
        PlanningField: {
            fieldNr: number;
            /** @description There should be at least 1 item
             *      */
            pouleFilters: components["schemas"]["PlanningFieldFilter"][];
        };
        PlanningFieldFilter: {
            categoryNrs: number[];
            pouleNrs: number[];
        };
        PlanningAgainstGame: {
            seats: (components["schemas"]["HomeAwaySeatEnum"] | components["schemas"]["NorthSouthEastWestSeatEnum"])[];
            batchNr: number;
        } & components["schemas"]["PlanningGameProperties"];
        PlanningTogetherGame: {
            seats?: components["schemas"]["TogetherSeat"][];
        } & components["schemas"]["PlanningGameProperties"];
        PlanningGameProperties: {
            categoryNr: number;
            pouleNr: number;
            sportNr: number;
            fieldNr: number;
        };
        PlanningReferee: {
            refereeNr: number;
            /** @description If undefined, all categories will be used, else the categories in the array will be assigned to
             *      */
            categoryNrs: number[] | null;
            /** @description If undefined, all sports will be assigned to, else the sports in the array will be assigned to
             *      */
            sportNrs: number[] | null;
        };
        PlanningPoule: {
            pouleNr: number;
            /**
             * @description The maximum difference between the greatest and smallest poule is always 1
             *
             * @example [6,5]
             *
             */
            places: number[];
        };
        /** @enum {string} */
        HomeAwaySeatEnum: HomeAwaySeatEnum;
        /** @enum {string} */
        NorthSouthEastWestSeatEnum: NorthSouthEastWestSeatEnum;
        /** @enum {string} */
        SelfRefereeScopeEnum: SelfRefereeScopeEnum;
        /** @enum {string} */
        GameOrderEnum: GameOrderEnum;
        /** @enum {string} */
        SeatConfigEnum: SeatConfigEnum;
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    generatePlanning: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlanningConfiguration"];
            };
        };
        responses: {
            /** @description Planning result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Planning"];
                };
            };
            /** @description Bad Request - Invalid input or malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Error message describing the bad request */
                        message?: string;
                    };
                };
            };
        };
    };
}
export enum HomeAwaySeatEnum {
    HomeSeat = "HomeSeat",
    AwaySeat = "AwaySeat"
}
export enum NorthSouthEastWestSeatEnum {
    NorthSeat = "NorthSeat",
    SouthSeat = "SouthSeat",
    WestSeat = "WestSeat",
    EastSeat = "EastSeat"
}
export enum SelfRefereeScopeEnum {
    SamePoule = "SamePoule",
    OtherPoulesSameCategory = "OtherPoulesSameCategory",
    OtherPoulesOtherCategories = "OtherPoulesOtherCategories"
}
export enum GameOrderEnum {
    CycleFirst = "CycleFirst",
    PouleFirst = "PouleFirst"
}
export enum SeatConfigEnum {
    HomeAwayEnum = "HomeAwayEnum",
    NorthSouthEastWestEnum = "NorthSouthEastWestEnum",
    TogetherSeatConfig = "TogetherSeatConfig"
}
